# This is a throughput test of a standalone BLE112 module

# Buffer 
dim sensor(20) 
dim connected 
dim bdaddr(6)


# OTA Variables
dim command
dim dfu_pointer  # current pointer to flash location to upload firmware
dim erase_page   # current page to erase
const MAX_ERASE_PAGE = 64


# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
procedure handle_ota_control(connection, offset, value_len, value_data())
    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
        # Command 4 : Power up external flash
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device
    
    # Attribute is user attribute, reason is always write_request_user
    if value_len > 1 || offset > 0 then
        # Not a valid command -> report application error code : 0x80
        call attributes_user_write_response(connection, $80)
    else
        command = value_data(0:1)

        if command > 4 then # Unknown command -> report application error code : 0x80
            call attributes_user_write_response(connection, $80)
        else
            if command = 3 then # Command 3 received -> Boot to DFU mode
                call system_reset(1)
            else
                # Other commands are not used, but still accepted in order
                # to be compatible with the external flash OTA
                # implementation
                call attributes_user_write_response(connection, $0)
            end if
        end if
    end if
end


# Incoming data event listener
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    
    if (handle = device_reset) then
        command=value_data(0:1)
        # Command 1 received, reset device
        if command=1 then  
            call system_reset(0)
        end if
    end if
    
	# Both ota_control endpoints run the same code, however, the wo_response just ignores most of this
    if handle = ota_control || handle = ota_control_wo_response then
        call handle_ota_control(connection, offset, value_len, value_data(0:value_len))
    end if

    # Check if OTA data attribute is written which carries the firmware update
    # and store the data to the internal flash
    if handle = ota_data || handle = ota_data_w_response then
        call flash_write_data(dfu_pointer, value_len, value_data(0:value_len))
        dfu_pointer = dfu_pointer + value_len
    end if
end


# Boot event listener
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw)

    connected = 0

    # configure P0.7 as output (Pin 19 on JRowberg's BLE112 Breakout Board)
    call hardware_io_port_config_direction(0, $80)

    # Disable P0.7 pin (ie. turn off LED or similar)
    call hardware_io_port_write(0, $80, 0)

    # Start advertisement
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
    call sm_set_bondable_mode(1)

    #Set timer to generate event every 20ms (32768/1000ms * 20ms) (needs to be roughly less than connection interval time)
    call hardware_set_soft_timer(100, 1, 0)
    
    	#read the local devices public Bluetooth address
	call system_address_get()(bdaddr(0:6))
	
	#create the device name buffer (ascii)
	sensor(0:1)   = 83  # S 
	sensor(1:1)   = 97  # a
	sensor(2:1)   = 109 # m
	sensor(3:1)   = 112 # p
	sensor(4:1)   = 108 # l
	sensor(5:1)   = 101 # e
	sensor(6:1)   = 49  # 1
	sensor(7:1)   = 45  # -
	sensor(8:1)   = (bdaddr(5:1)/$10) + 48 + ((bdaddr(5:1)/$10)/10*7) 
	sensor(9:1)   = (bdaddr(5:1)&$f)  + 48 + ((bdaddr(5:1)&$f )/10*7) 
	sensor(10:1)  = (bdaddr(4:1)/$10) + 48 + ((bdaddr(4:1)/$10)/10*7) 
	sensor(11:1)  = (bdaddr(4:1)&$f)  + 48 + ((bdaddr(4:1)&$f )/10*7) 
	sensor(12:1)  = (bdaddr(3:1)/$10) + 48 + ((bdaddr(3:1)/$10)/10*7) 
	sensor(13:1)  = (bdaddr(3:1)&$f)  + 48 + ((bdaddr(3:1)&$f )/10*7) 
	sensor(14:1)  = (bdaddr(2:1)/$10) + 48 + ((bdaddr(2:1)/$10)/10*7) 
	sensor(15:1)  = (bdaddr(2:1)&$f)  + 48 + ((bdaddr(2:1)&$f )/10*7) 
	sensor(16:1)  = (bdaddr(1:1)/$10) + 48 + ((bdaddr(1:1)/$10)/10*7) 
	sensor(17:1)  = (bdaddr(1:1)&$f)  + 48 + ((bdaddr(1:1)&$f )/10*7) 
	sensor(18:1)  = (bdaddr(0:1)/$10) + 48 + ((bdaddr(0:1)/$10)/10*7) 
	sensor(19:1)  = (bdaddr(0:1)&$f)  + 48 + ((bdaddr(0:1)&$f )/10*7)
    
end

# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    # This is a good place to set the connection interval (sampled below)
    
    # Set up a connection interval of 20ms (40*1.25ms)
    if connected = 0 then
        call connection_update(connection,15,15,latency,timeout)
    end if 
    connected = 1
end

# Disconnection event listener
event connection_disconnected(connection, reason)
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)	# Start advertisement
    connected = 0
end

event hardware_soft_timer(handle)
        sensor(0:1)   = sensor(0:1) + 1
        # Write acceleration and gyro to GATT
        call attributes_write(xgatt_sensor, 0, 20, sensor(0:20))        
end