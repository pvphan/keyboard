
# OTA Variables
dim command
dim dfu_pointer  # current pointer to flash location to upload firmware
dim erase_page   # current page to erase
const MAX_ERASE_PAGE = 64


# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
procedure handle_ota_control(connection, offset, value_len, value_data())
    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
        # Command 4 : Power up external flash
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device
    
    # Attribute is user attribute, reason is always write_request_user
    if value_len > 1 || offset > 0 then
        # Not a valid command -> report application error code : 0x80
        call attributes_user_write_response(connection, $80)
    else
        command = value_data(0:1)

        if command > 4 then # Unknown command -> report application error code : 0x80
            call attributes_user_write_response(connection, $80)
        else
            if command = 3 then # Command 3 received -> Boot to DFU mode
                call system_reset(1)
            else
                # Other commands are not used, but still accepted in order
                # to be compatible with the external flash OTA
                # implementation
                call attributes_user_write_response(connection, $0)
            end if
        end if
    end if
end


# Incoming data event listener
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    
    if (handle = device_reset) then
        command=value_data(0:1)
        # Command 1 received, reset device
        if command=1 then  
            call system_reset(0)
        end if
    end if
    
	# Both ota_control endpoints run the same code, however, the wo_response just ignores most of this
    if handle = ota_control || handle = ota_control_wo_response then
        call handle_ota_control(connection, offset, value_len, value_data(0:value_len))
    end if

    # Check if OTA data attribute is written which carries the firmware update
    # and store the data to the internal flash
    if handle = ota_data || handle = ota_data_w_response then
        call flash_write_data(dfu_pointer, value_len, value_data(0:value_len))
        dfu_pointer = dfu_pointer + value_len
    end if
end

# Boot event listener
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw)

      #Set timer to generate event every 1s
      #call hardware_set_soft_timer(32768, 1, 0)

      # configure P0.7 as output
      call hardware_io_port_config_direction(0, $80)

      # Disable P0.7 pin. Parameters: I/O port to write to 0/1/2, 
      #                               bitmask of pins to modify, 
      #                               bitmask of pin values to set
      call hardware_io_port_write(0, $80, 0)
	  
	  call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)	# Start advertisement
	  call sm_set_bondable_mode(1)
	  
	  call system_endpoint_set_watermarks(system_endpoint_uart1, 12, 0)	  
end

# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
end

# Disconnection event listener
event connection_disconnected(connection, reason)
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)	# Start advertisement
end

# endpoint data in
dim in(12) 
dim in_len
dim result
dim port
dim data

# System endpoint watermark event listener
# Generated when there is data available from UART
event system_endpoint_watermark_rx(endpoint, size)
   call hardware_io_port_read(0, $80)(result, port, data)

   if data & $80 then
      call hardware_io_port_write(0, $80, 0)
   else
      call hardware_io_port_write(0, $80, $80)
   end if	

   if endpoint = system_endpoint_uart1 then
        in_len = size

        call system_endpoint_set_watermarks(system_endpoint_uart1, 0, $ff) 						# disable RX watermark
        call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len))	# read data from UART
		call system_endpoint_set_watermarks(system_endpoint_uart1, 12, $ff) 						# enable RX watermark
        call attributes_write(xgatt_sensor, 0, in_len, in(0:in_len))								# Write data to GATT
    end if
end

