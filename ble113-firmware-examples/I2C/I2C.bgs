# This is the BGScript for communication to/from the MPU6050 using the BLE112 I2C interface (pin 8-SDA, pin 7 - SCL)  

# API:
# call hardware_i2c_write(address,stop,data_len, data_data)(written)
# call hardware_i2c_read(address,stop,length)(result,data_len,data_data)
# call attributes_write(handle, offset, value_len, value_data)(result)

dim written
dim result
dim port
dim data
dim data_len
dim connected

# OTA Variables
dim command
dim dfu_pointer  # current pointer to flash location to upload firmware
dim erase_page   # current page to erase
const MAX_ERASE_PAGE = 64


# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
procedure handle_ota_control(connection, offset, value_len, value_data())
    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
        # Command 4 : Power up external flash
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device
    
    # Attribute is user attribute, reason is always write_request_user
    if value_len > 1 || offset > 0 then
        # Not a valid command -> report application error code : 0x80
        call attributes_user_write_response(connection, $80)
    else
        command = value_data(0:1)

        if command > 4 then # Unknown command -> report application error code : 0x80
            call attributes_user_write_response(connection, $80)
        else
            if command = 3 then # Command 3 received -> Boot to DFU mode
                call system_reset(1)
            else
                # Other commands are not used, but still accepted in order
                # to be compatible with the external flash OTA
                # implementation
                call attributes_user_write_response(connection, $0)
            end if
        end if
    end if
end


# Incoming data event listener
event attributes_value(connection, reason, handle, offset, value_len, value_data)
    
    if (handle = device_reset) then
        command=value_data(0:1)
        # Command 1 received, reset device
        if command=1 then  
            call system_reset(0)
        end if
    end if
    
	# Both ota_control endpoints run the same code, however, the wo_response just ignores most of this
    if handle = ota_control || handle = ota_control_wo_response then
        call handle_ota_control(connection, offset, value_len, value_data(0:value_len))
    end if

    # Check if OTA data attribute is written which carries the firmware update
    # and store the data to the internal flash
    if handle = ota_data || handle = ota_data_w_response then
        call flash_write_data(dfu_pointer, value_len, value_data(0:value_len))
        dfu_pointer = dfu_pointer + value_len
    end if
end

# Boot event listener
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw)

      #Set timer to generate event every 50ms (32768/1000ms * 50ms) (needs to be roughly less than connection interval time)
      call hardware_set_soft_timer(1634, 1, 0)
      
	  # This should be the timer for 1s
	  # call hardware_set_soft_timer(32768, 1, 0)

      # Initialize as 'disconnected'  
      connected = 0
	  
	  call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)	# Start advertisement
	  call sm_set_bondable_mode(1)

	  # Read WHO_AM_I register (0x75) of device at address (default address of MPU6050 is 0x68, which is then left shifted once to make 0xD0/208)
	  call hardware_i2c_write(208,0,1,"\x75")(written)
	  call hardware_i2c_read(208,1,1)(result,data_len,data)
	  call attributes_write(xgatt_who, 0, 1, data)
  
 	  
	  # Set power management register (0x6B) to use gyro clock (0x01)
		#setClockSource(MPU6050_CLOCK_PLL_XGYRO);
		#I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
		#setSleepEnabled(false);
		#I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
	  call hardware_i2c_write(208,1,2,"\x6b\x01")(written)
	
      # Set configuration register (0x1A) filter at 90Hz (0x02)
	  call hardware_i2c_write(208,1,2,"\x1a\x02")(written)
    
	  # Set gyro configuration register (0x1B) to all zeros (0x00)
		#setFullScaleGyroRange(MPU6050_GYRO_FS_250);
		#I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
	  call hardware_i2c_write(208,1,2,"\x1b\x00")(written)

	  # Set accelerometer configuration register (0x1C) to all zeros (0x00)
		#setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
		#I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
	  call hardware_i2c_write(208,1,2,"\x1c\x00")(written)
end

# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    # Set up a connection interval of 50ms (40*1.25ms)
    if connected = 0 then
        call connection_update(connection,40,40,latency,timeout)
    end if 
    connected = 1
end

# Disconnection event listener
event connection_disconnected(connection, reason)
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)	# Start advertisement
    connected = 0
end

# Buffer to hold the 6 bytes of acceleration data, 6 bytes of gyro data
dim sensor(12)

#Timer event listener
event hardware_soft_timer(handle)
	# Read the acceleration X, Y, Z (high, then low bytes) registers and write to the GATT
	# Read gyro X,Y,Z (high, then low bytes) registers and write to GATT
	call hardware_i2c_write(208,0,1,"\x3b")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(0))

	call hardware_i2c_write(208,0,1,"\x3c")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(1))
	
	call hardware_i2c_write(208,0,1,"\x3d")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(2))

	call hardware_i2c_write(208,0,1,"\x3e")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(3))

	call hardware_i2c_write(208,0,1,"\x3f")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(4))

	call hardware_i2c_write(208,0,1,"\x40")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(5))

	call hardware_i2c_write(208,0,1,"\x43")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(6))

	call hardware_i2c_write(208,0,1,"\x44")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(7))
	
	call hardware_i2c_write(208,0,1,"\x45")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(8))

	call hardware_i2c_write(208,0,1,"\x46")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(9))

	call hardware_i2c_write(208,0,1,"\x47")(written)
	call hardware_i2c_read(208,0,1)(result,data_len,sensor(10))

	call hardware_i2c_write(208,0,1,"\x48")(written)
	call hardware_i2c_read(208,1,1)(result,data_len,sensor(11))
	
	# Write acceleration and gyro to GATT
	call attributes_write(xgatt_sensor, 0, 12, sensor(0:12))	
end
