# Advertisement data
dim advdata(30)

# Constants
const ADVERTISING_INTERVAL = 200  # 200 * 625us = 125ms

# System boot event listener
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)

    # Use all three advertisement channels
    # Note: This advertising interval is VERY power hungry - not great for batteries
    call gap_set_adv_parameters(ADVERTISING_INTERVAL, ADVERTISING_INTERVAL, 7)

    # Initialize iBeacon advertisement data

    # Flags = LE General Discovery, single mode device (02 01 06)
    advdata(0:1) = $02
    advdata(1:1) = $01
    advdata(2:1) = $06
    
    # Manufacturer data
    advdata(3:1) = $1a
    advdata(4:1) = $ff
    
    # Preamble
    advdata(5:1) = $4c
    advdata(6:1) = $00
    advdata(7:1) = $02
    advdata(8:1) = $15

    # UUID: 726f626f-7470-616a-616d-61732e636f6d
    advdata(9:1) = $72
    advdata(10:1) = $6f
    advdata(11:1) = $62
    advdata(12:1) = $6f
    advdata(13:1) = $74
    advdata(14:1) = $70
    advdata(15:1) = $61
    advdata(16:1) = $6a
    advdata(17:1) = $61
    advdata(18:1) = $6d
    advdata(19:1) = $61
    advdata(20:1) = $73
    advdata(21:1) = $2e
    advdata(22:1) = $63
    advdata(23:1) = $6f
    advdata(24:1) = $6d

    # Major : 00 00
    advdata(25:1) = $00
    advdata(26:1) = $00

    # Minor : 00 00
    advdata(27:1) = $00
    advdata(28:1) = $00

    # Measured TX power : -58
    advdata(29:1) = $c6 

    # Set advertisement data
    call gap_set_adv_data(0, 30, advdata(0:30))

    # Set to advertising mode - with user data
    call gap_set_mode(4, gap_undirected_connectable)
end


# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
procedure handle_ota_control(connection, offset, value_len, value_data())
    # Check if OTA control point attribute is written by the remote device and execute the command
        # Command 0 : Erase flash block 0 (0x0-0x1FFFF)
        # Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
        # Command 2 : Reset DFU data pointer
        # Command 3 : Boot to DFU mode
        # Command 4 : Power up external flash
    # In case of errors application error code 0x80 is returned to the remote device
    # In case the flash comms fails error code 0x90 is returned to the remote device
    
    # Attribute is user attribute, reason is always write_request_user
    if value_len > 1 || offset > 0 then
        # Not a valid command -> report application error code : 0x80
        call attributes_user_write_response(connection, $80)
    else
        command = value_data(0:1)

        if command > 4 then # Unknown command -> report application error code : 0x80
            call attributes_user_write_response(connection, $80)
        else
            if command = 3 then # Command 3 received -> Boot to DFU mode
                call system_reset(1)
            else
                # Other commands are not used, but still accepted in order
                # to be compatible with the external flash OTA
                # implementation
                call attributes_user_write_response(connection, $0)
            end if
        end if
    end if
end


# Incoming data event listener
event attributes_value(connection, reason, handle, offset, value_len, value_data)    
    # Both ota_control endpoints run the same code, however, the wo_response just ignores most of this
    if handle = xgatt_ota_control || handle = xgatt_ota_control_wo_response then
        call handle_ota_control(connection, offset, value_len, value_data(0:value_len))
    end if

    # Check if OTA data attribute is written which carries the firmware update
    # and store the data to the internal flash
    if handle = xgatt_ota_data || handle = xgatt_ota_data_w_response then
        call flash_write_data(dfu_pointer, value_len, value_data(0:value_len))
        dfu_pointer = dfu_pointer + value_len
    end if
end


# Disconnection event listener
event connection_disconnected(handle, result)
    call gap_set_adv_parameters(ADVERTISING_INTERVAL, ADVERTISING_INTERVAL, 7)
    
    # Set to advertising mode - with user data
    call gap_set_mode(4, gap_undirected_connectable)
end